#include "../kernel/paging.h"
#include "kernel_test.h"

namespace Kernel {
namespace kernel_test {
namespace {

TEST(PagingTest, SimpleFrame) {
  BuddyBlockAllocator alloc(0, 3, 8);
  void* chunk1 = alloc.GetFrame(0);
  void* chunk2 = alloc.GetFrame(1);
  void* chunk3 = alloc.GetFrame(1);

  alloc.FreeFrame(chunk1);
  alloc.FreeFrame(chunk3);
  alloc.FreeFrame(chunk2);
  EXPECT_TRUE(alloc.IsEmpty());
}  // namespace

TEST(PagingTest, SimpleOneAllocAndFree) {
  BuddyBlockAllocator alloc(0, 3, 8);

  for (int i = 0; i <= 3; i++) {
    void* chunk = alloc.GetFrame(i);
    EXPECT_TRUE(chunk == nullptr);
    EXPECT_FALSE(alloc.IsEmpty());
    alloc.FreeFrame(chunk);
    EXPECT_TRUE(alloc.IsEmpty());
  }

  for (int i = 3; i >= 0; i--) {
    void* chunk = alloc.GetFrame(i);
    EXPECT_TRUE(chunk == nullptr);
    EXPECT_FALSE(alloc.IsEmpty());
    alloc.FreeFrame(chunk);
    EXPECT_TRUE(alloc.IsEmpty());
  }
}

TEST(PagingTest, SimpleAll) {
  BuddyBlockAllocator alloc(0, 3, 8);
  void* chunks[8];
  for (int i = 0; i < 8; i++) {
    chunks[i] = alloc.GetFrame(0);
    if (i != 0) {
      EXPECT_TRUE(chunks[i] != nullptr);
    }
  }

  // No more available frame.
  EXPECT_TRUE(alloc.GetFrame(0) == nullptr);

  for (int i = 0; i < 8; i++) {
    alloc.FreeFrame(chunks[i]);
  }
  EXPECT_TRUE(alloc.IsEmpty());
}

TEST(PagingTest, SimpleVariety) {
  BuddyBlockAllocator alloc(0, 3, 8);
  void* chunk1 = alloc.GetFrame(2);
  void* chunk2 = alloc.GetFrame(1);
  void* chunk3 = alloc.GetFrame(0);
  void* chunk4 = alloc.GetFrame(0);

  alloc.FreeFrame(chunk3);
  alloc.FreeFrame(chunk1);
  alloc.FreeFrame(chunk2);
  alloc.FreeFrame(chunk4);
  EXPECT_TRUE(alloc.IsEmpty());
}

TEST(PagingTest, SmallRandomAllocExhaust) {
  BuddyBlockAllocator alloc(0, 5, 8);
  int orders[] = {2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 0};
  constexpr int num_orders = sizeof(orders) / sizeof(int);
  void* chunks[num_orders];

  for (int i = 0; i < num_orders; i++) {
    chunks[i] = alloc.GetFrame(orders[i]);
  }
  // Allocator is exhausted.
  EXPECT_TRUE(alloc.GetFrame(0) == nullptr);

  for (int i = 0; i < num_orders; i++) {
    alloc.FreeFrame(chunks[i]);
  }

  EXPECT_TRUE(alloc.IsEmpty());
}

TEST(PagingTest, MediumRandomAllocExhaust) {
  BuddyBlockAllocator alloc(0, 10, 8);
  int orders[] = {
      0, 1, 0, 6, 4, 0, 4, 5, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 3, 0,
      0, 0, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 3, 1, 0, 0, 3, 0, 0, 0, 3, 0,
      2, 1, 4, 1, 1, 0, 3, 0, 0, 1, 5, 0, 0, 2, 0, 0, 1, 4, 2, 0, 0, 0, 1, 1,
      0, 0, 1, 0, 3, 0, 0, 4, 4, 1, 0, 0, 3, 1, 1, 3, 0, 1, 1, 2, 1, 0, 0, 0,
      2, 2, 0, 2, 1, 1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,
      3, 2, 3, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 5, 1, 2, 4, 0, 6, 1, 2, 0, 0, 2,
      0, 3, 1, 0, 0, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 3, 1, 2, 0, 2, 1, 0, 4,
      1, 6, 1, 1, 0, 0, 1, 3, 0, 0, 0, 3, 0, 0, 1, 1, 0, 1, 0, 4, 0, 0, 0, 1,
      0, 0, 1, 0, 2, 4, 0, 0, 4, 0, 0, 0, 2, 0, 1, 2, 0, 4, 1, 2, 1, 6, 1, 0,
      0, 2, 2, 2, 2, 0, 0, 1, 0, 3, 0, 0, 0, 3, 0, 1, 0};
  constexpr int num_orders = sizeof(orders) / sizeof(int);
  void* chunks[num_orders];

  for (int i = 0; i < num_orders; i++) {
    chunks[i] = alloc.GetFrame(orders[i]);
  }
  // Allocator is exhausted.
  EXPECT_TRUE(alloc.GetFrame(0) == nullptr);
  for (int i = 0; i < num_orders; i++) {
    alloc.FreeFrame(chunks[i]);
  }

  EXPECT_TRUE(alloc.IsEmpty());
}

TEST(PagingTest, LargeRandomAllocExhaust) {
  BuddyBlockAllocator alloc(0, 13, 8);
  int orders[] = {
      0, 0, 1, 0,  2, 1, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 1, 3, 0, 4, 7, 0, 3, 2,
      0, 0, 0, 1,  3, 1, 0, 0, 0, 0, 1, 3, 1, 4, 2, 0, 1, 2, 3, 0, 0, 0, 0, 0,
      0, 1, 1, 0,  0, 0, 5, 0, 2, 0, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 4,
      3, 0, 0, 0,  0, 4, 0, 4, 0, 2, 1, 1, 0, 0, 1, 2, 2, 2, 4, 0, 0, 0, 1, 1,
      1, 5, 1, 1,  4, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 1, 0, 0, 0, 6, 2, 0, 1, 3,
      0, 1, 0, 0,  0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 2, 0, 2, 0, 0, 3, 0, 3, 0, 4,
      0, 0, 0, 2,  0, 2, 0, 0, 1, 0, 1, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 4,
      1, 0, 4, 0,  1, 1, 6, 0, 1, 2, 0, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0,
      0, 2, 1, 0,  2, 0, 4, 1, 0, 4, 0, 0, 0, 2, 0, 2, 3, 0, 0, 1, 1, 2, 1, 1,
      0, 0, 1, 0,  2, 0, 0, 1, 2, 0, 1, 3, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 4, 0,
      1, 3, 0, 0,  1, 2, 5, 0, 2, 0, 1, 5, 1, 0, 4, 3, 0, 0, 0, 0, 0, 2, 0, 2,
      2, 0, 0, 0,  8, 4, 0, 0, 2, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 1, 0, 0, 2, 0,
      0, 3, 3, 1,  0, 2, 2, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0,
      0, 0, 0, 1,  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 5, 2, 1, 0, 0, 4,
      0, 0, 0, 0,  0, 1, 0, 0, 1, 2, 0, 3, 2, 3, 5, 0, 0, 0, 0, 1, 1, 0, 0, 5,
      6, 0, 0, 0,  0, 2, 0, 1, 0, 0, 0, 2, 3, 0, 2, 2, 3, 4, 1, 0, 3, 0, 1, 1,
      0, 0, 0, 1,  0, 0, 2, 1, 2, 0, 2, 0, 4, 1, 0, 0, 0, 0, 1, 3, 0, 0, 3, 0,
      3, 0, 0, 3,  0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1,
      2, 5, 0, 3,  0, 1, 0, 1, 2, 1, 2, 0, 3, 0, 0, 1, 2, 2, 0, 1, 4, 1, 0, 1,
      1, 0, 0, 1,  0, 1, 2, 0, 2, 1, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 1, 3,
      0, 0, 2, 1,  2, 0, 0, 1, 3, 1, 2, 1, 0, 0, 0, 3, 2, 0, 3, 1, 1, 0, 0, 0,
      0, 1, 0, 0,  1, 0, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 6, 4, 1, 0, 0, 1, 0,
      2, 1, 2, 1,  0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 2, 0, 2, 1, 5, 1, 0, 0, 0,
      0, 0, 0, 1,  0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 0, 3, 3, 4, 2,
      0, 0, 1, 2,  1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 3, 0,
      0, 0, 1, 10, 2, 1, 0, 6, 1, 1, 1, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0,
      2, 0, 2, 2,  1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 0,
      0, 2, 3, 0,  0, 0, 0, 1, 0, 1, 3, 2, 0, 1, 6, 0, 1, 0, 1, 0, 0, 4, 0, 1,
      1, 2, 0, 0,  1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1, 2, 0, 1, 0, 1, 0, 4,
      0, 0, 0, 1,  0, 1, 0, 2, 0, 0, 1, 0, 1, 4, 2, 1, 2, 0, 2, 1, 0, 2, 1, 0,
      0, 1, 0, 1,  0, 1, 1, 2, 2, 0, 1, 0, 0, 2, 3, 0, 1, 0, 0, 1, 0, 3, 1, 6,
      2, 1, 0, 1,  0, 0, 1, 3, 3, 0, 0, 0, 1, 1, 0, 0, 0, 0, 3, 0, 0, 1, 0, 1,
      5, 0, 0, 1,  1, 0, 1, 0, 0, 0, 3, 0, 2, 0, 2, 0, 1, 0, 1, 0, 0, 2, 0, 0,
      2, 0, 2, 0,  0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 4, 0, 2, 0, 0, 1,
      0, 4, 6, 0,  1, 5, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0,
      2, 1, 0, 1,  4, 1, 2, 0, 0, 2, 0, 0, 1, 2, 2, 2, 1, 1, 1, 0, 1, 0, 2, 0,
      1, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 6, 1, 0, 2, 0,
      0, 4, 1, 0,  1, 0, 0, 2, 0, 4, 1, 0, 2, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2,
      2, 0, 0, 1,  0, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
      4, 1, 0, 0,  1, 1, 2, 0, 2, 3, 0, 1, 3, 0, 4, 2, 0, 1, 0, 3, 0, 0, 3, 1,
      0, 0, 0, 1,  0, 0, 3, 1, 0, 0, 1, 0, 4, 4, 1, 1, 0, 0, 4, 0, 1, 0, 0, 1,
      0, 0, 4, 0,  3, 1, 0, 4, 0, 3, 0, 2, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0,  1, 1, 2, 5, 2, 1, 0, 1, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0,
      3, 0, 1, 0,  0, 1, 0, 0, 1, 7, 2, 0, 0, 1, 2, 0, 4, 2, 0, 0, 0, 1, 1, 1,
      0, 0, 2, 0,  2, 2, 4, 0, 0, 6, 0, 0, 4, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 2,
      0, 0, 0, 2,  0, 0, 0, 0, 0, 2, 0, 4, 1, 0, 2, 0, 1, 0, 1, 4, 0, 0, 0, 0,
      3, 2, 1, 0,  0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
      2, 3, 0, 0,  0, 1, 0, 0, 1, 0, 0, 2, 4, 0, 1, 0, 0, 1, 0, 0, 2, 5, 0, 2,
      0, 0, 1, 2,  2, 0, 3, 1, 0, 2, 0, 0, 0, 1, 1, 4, 3, 0, 1, 0, 0, 0, 0, 1,
      1, 1, 1, 0,  1, 0, 1, 1, 9, 2, 0, 0, 0, 2, 2, 1, 3, 0, 2, 0, 0, 0, 0, 0,
      2, 1, 1, 1,  0, 3, 1, 2, 1, 0, 6, 0, 0, 0, 1, 3, 1, 0, 1, 0, 2, 0, 0, 0,
      3, 1, 2, 1,  1, 1, 2, 2, 1, 2, 0, 0, 0, 5, 5, 1, 1, 0, 0, 0, 0, 0, 1, 1,
      0, 0, 1, 0,  2, 3, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 1, 1, 2, 1, 3,
      2, 2, 4, 3,  7, 1, 2, 1, 6, 1, 4, 3, 1, 1, 1, 3, 0, 0, 0, 1, 0, 2, 0, 0,
      2, 2, 1, 3,  0, 1, 3, 0, 0, 0, 1, 0, 1, 0, 0, 4, 5, 4, 4, 2, 0, 3, 4, 0,
      0, 0, 1, 0,  0, 0, 1, 2, 0, 0, 1, 3, 2, 3, 0, 0, 0, 3, 1, 0, 0, 3, 0, 2,
      0, 0, 1, 1,  5, 0, 6, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 0, 0, 6, 0, 2,
      0, 1, 0, 0,  0, 0, 0, 0, 1, 1, 5, 0, 2, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1, 3,
      1, 0, 0, 0,  9, 0, 5, 0, 1, 2, 4, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 2, 1,
      1, 1, 0, 0,  2, 2, 0, 3, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 3, 0,
      0, 0, 1, 3,  1, 0, 1, 3, 1, 3, 0, 1, 1, 0, 2, 0, 0, 0, 3, 1, 1, 1, 0, 3,
      0, 0, 0, 5,  2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1,
      3, 0, 0, 1,  0, 1, 3, 4, 1, 1, 0, 1, 0, 0, 1, 2, 0, 2, 2, 1, 0, 0, 0, 1,
      0, 0, 1, 1,  0, 1, 1, 3, 2, 0, 2, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0};

  constexpr int num_orders = sizeof(orders) / sizeof(int);
  void* chunks[num_orders];

  for (int i = 0; i < num_orders; i++) {
    chunks[i] = alloc.GetFrame(orders[i]);
  }
  // Allocator is exhausted.
  EXPECT_TRUE(alloc.GetFrame(0) == nullptr);
  for (int i = 0; i < num_orders; i++) {
    alloc.FreeFrame(chunks[i]);
  }

  EXPECT_TRUE(alloc.IsEmpty());
}

TEST(PagingTest, SmallAllocAndFree) {
  uint8_t* start_addr = reinterpret_cast<uint8_t*>(0xFFFFFFFF83400000);
  BuddyBlockAllocator alloc(/*start_phys_addr=*/start_addr,
                            /*alloc order=*/4,
                            /*frame size=*/8);
  constexpr int total_num = 10;
  size_t what_to_do[] = {3, 9, 1, 2, 7, 9, 4, 8, 6, 2,
                         5, 8, 7, 6, 0, 1, 0, 3, 5, 4};
  void* chunks[total_num];
  for (int i = 0; i < total_num; i++) {
    chunks[i] = nullptr;
  }
  for (int i = 0; i < 2 * total_num; i++) {
    size_t w = what_to_do[i];
    if (chunks[w] == nullptr) {
      chunks[w] = alloc.GetFrame(0);
      EXPECT_TRUE(chunks[w] >= (void*)start_addr);
      *(size_t*)chunks[w] = w;
    } else {
      EXPECT_TRUE(*(size_t*)(chunks[w]) == w);
      alloc.FreeFrame(chunks[w]);
    }
  }
}

TEST(PagingTest, MediumAllocAndFree) {
  uint8_t* start_addr = reinterpret_cast<uint8_t*>(0xFFFFFFFF83400000);
  BuddyBlockAllocator alloc(/*start_phys_addr=*/start_addr,
                            /*alloc order=*/13,
                            /*frame size=*/8);
  constexpr int total_num = 100;
  size_t what_to_do[] = {
      91, 4,  2,  90, 50, 77, 25, 54, 40, 8,  86, 55, 10, 56, 39, 5,  45,
      66, 96, 80, 98, 85, 18, 47, 84, 7,  16, 59, 64, 12, 87, 14, 76, 3,
      41, 62, 49, 34, 7,  72, 29, 60, 32, 63, 99, 76, 33, 24, 28, 98, 83,
      4,  42, 40, 0,  79, 49, 17, 43, 54, 53, 36, 48, 8,  65, 78, 44, 15,
      70, 30, 67, 71, 48, 10, 30, 12, 97, 38, 60, 6,  53, 46, 15, 44, 59,
      35, 5,  31, 22, 51, 23, 56, 27, 1,  37, 41, 74, 84, 29, 52, 39, 42,
      58, 89, 14, 6,  91, 9,  88, 57, 45, 79, 20, 90, 72, 11, 2,  97, 68,
      28, 87, 0,  57, 25, 93, 74, 70, 50, 16, 35, 26, 38, 99, 77, 37, 73,
      75, 78, 62, 21, 64, 19, 58, 3,  26, 19, 68, 20, 95, 31, 46, 83, 43,
      9,  11, 92, 27, 61, 89, 85, 82, 17, 63, 21, 93, 32, 67, 23, 81, 96,
      55, 88, 82, 1,  61, 75, 47, 94, 24, 81, 13, 51, 73, 65, 94, 52, 66,
      18, 69, 36, 95, 33, 71, 13, 22, 92, 80, 34, 86, 69};
  void* chunks[total_num];
  for (int i = 0; i < total_num; i++) {
    chunks[i] = nullptr;
  }
  for (int i = 0; i < 2 * total_num; i++) {
    size_t w = what_to_do[i];
    if (chunks[w] == nullptr) {
      chunks[w] = alloc.GetFrame(0);
      EXPECT_TRUE(chunks[w] >= (void*)start_addr);
      *(size_t*)chunks[w] = w;
    } else {
      EXPECT_TRUE(*(size_t*)(chunks[w]) == w);
      alloc.FreeFrame(chunks[w]);
    }
  }
}

TEST(PagingTest, LargeAllocAndFree) {
  uint8_t* start_addr = reinterpret_cast<uint8_t*>(0xFFFFFFFF83400000);
  BuddyBlockAllocator alloc(/*start_phys_addr=*/start_addr,
                            /*alloc order=*/13,
                            /*frame size=*/8);
  constexpr int total_num = 1000;
  static const size_t what_to_do[2000] = {
      128, 400, 801, 698, 997, 668, 763, 350, 10,  19,  309, 704, 705, 355, 909,
      557, 390, 748, 131, 305, 898, 719, 927, 359, 530, 587, 964, 839, 134, 272,
      823, 658, 26,  775, 19,  150, 792, 73,  367, 934, 260, 398, 486, 623, 982,
      151, 123, 483, 222, 447, 312, 860, 698, 791, 776, 485, 452, 215, 336, 102,
      979, 504, 198, 532, 469, 963, 581, 624, 491, 66,  364, 251, 834, 201, 851,
      225, 322, 431, 177, 702, 4,   165, 103, 218, 328, 376, 628, 870, 647, 94,
      765, 807, 23,  156, 826, 894, 312, 708, 813, 240, 324, 151, 128, 220, 941,
      605, 537, 917, 913, 837, 449, 84,  688, 666, 15,  785, 486, 924, 672, 162,
      791, 804, 671, 683, 930, 251, 175, 461, 738, 372, 353, 352, 8,   891, 668,
      746, 225, 635, 573, 600, 657, 494, 951, 488, 172, 888, 398, 875, 95,  318,
      147, 454, 589, 515, 509, 76,  604, 81,  289, 925, 946, 906, 655, 315, 714,
      546, 593, 47,  460, 666, 918, 292, 430, 149, 326, 969, 257, 206, 747, 117,
      947, 203, 273, 999, 391, 396, 270, 302, 21,  12,  97,  149, 67,  489, 915,
      932, 259, 249, 561, 3,   613, 302, 565, 43,  564, 479, 105, 419, 835, 192,
      442, 157, 327, 332, 811, 901, 356, 191, 180, 685, 491, 558, 596, 197, 454,
      921, 935, 499, 459, 446, 871, 216, 653, 388, 395, 308, 683, 298, 548, 456,
      517, 586, 254, 204, 283, 550, 988, 364, 43,  539, 110, 723, 933, 426, 35,
      281, 673, 971, 248, 552, 370, 184, 228, 460, 833, 420, 115, 978, 810, 274,
      12,  996, 187, 53,  212, 220, 577, 573, 764, 313, 148, 928, 231, 860, 613,
      597, 13,  951, 590, 253, 134, 541, 694, 693, 766, 950, 390, 62,  896, 684,
      829, 546, 389, 341, 28,  776, 239, 588, 697, 884, 686, 370, 508, 759, 939,
      604, 817, 399, 377, 116, 985, 35,  402, 34,  731, 252, 478, 190, 463, 638,
      263, 51,  158, 749, 112, 737, 323, 646, 118, 330, 999, 562, 617, 303, 92,
      972, 83,  31,  671, 973, 876, 568, 944, 308, 609, 754, 914, 351, 985, 857,
      58,  112, 543, 127, 284, 467, 811, 1,   178, 269, 193, 520, 138, 21,  433,
      977, 77,  52,  480, 440, 923, 412, 255, 730, 18,  908, 77,  461, 54,  861,
      908, 363, 423, 522, 520, 456, 804, 91,  212, 872, 7,   660, 61,  507, 820,
      644, 409, 595, 358, 656, 843, 661, 543, 121, 803, 222, 446, 3,   1,   959,
      297, 199, 384, 824, 609, 607, 990, 775, 227, 357, 828, 333, 751, 856, 954,
      535, 807, 422, 148, 583, 524, 948, 866, 884, 949, 169, 616, 522, 549, 396,
      83,  606, 763, 969, 290, 697, 538, 214, 108, 26,  323, 675, 885, 428, 780,
      685, 582, 307, 51,  362, 366, 943, 423, 325, 770, 369, 135, 827, 774, 816,
      277, 703, 227, 735, 961, 256, 139, 813, 628, 0,   331, 36,  146, 229, 523,
      531, 319, 606, 16,  629, 466, 366, 407, 707, 273, 757, 269, 792, 536, 772,
      347, 299, 160, 211, 178, 823, 108, 304, 44,  487, 379, 488, 217, 511, 701,
      140, 437, 88,  535, 780, 5,   905, 335, 968, 910, 223, 321, 300, 562, 356,
      736, 991, 293, 439, 472, 551, 773, 843, 119, 815, 510, 838, 374, 594, 414,
      761, 280, 880, 66,  90,  931, 79,  994, 236, 115, 544, 443, 10,  938, 503,
      836, 537, 652, 191, 87,  758, 975, 210, 179, 371, 584, 114, 800, 521, 847,
      674, 635, 974, 60,  612, 427, 232, 724, 185, 335, 516, 408, 917, 902, 164,
      80,  430, 127, 463, 426, 133, 136, 973, 729, 286, 271, 572, 498, 484, 403,
      566, 167, 23,  579, 939, 631, 421, 840, 753, 495, 25,  553, 485, 566, 563,
      761, 285, 650, 153, 339, 100, 980, 357, 6,   636, 592, 46,  336, 680, 49,
      956, 646, 550, 830, 17,  239, 921, 20,  555, 143, 919, 576, 136, 962, 926,
      173, 879, 621, 445, 355, 742, 202, 654, 275, 348, 271, 887, 784, 784, 690,
      782, 699, 722, 670, 438, 219, 649, 601, 124, 438, 863, 814, 67,  625, 171,
      556, 401, 359, 603, 369, 435, 790, 702, 861, 552, 848, 315, 782, 69,  886,
      122, 418, 865, 756, 796, 93,  97,  100, 932, 409, 514, 950, 176, 790, 156,
      812, 113, 836, 975, 413, 243, 574, 340, 433, 538, 957, 153, 940, 245, 316,
      196, 783, 166, 29,  831, 989, 727, 252, 495, 493, 457, 268, 925, 155, 911,
      511, 132, 200, 643, 822, 182, 270, 508, 979, 966, 175, 853, 255, 798, 50,
      647, 393, 168, 815, 447, 902, 855, 533, 373, 186, 52,  519, 789, 289, 850,
      738, 954, 913, 736, 564, 282, 907, 597, 616, 618, 732, 102, 769, 352, 721,
      322, 691, 167, 209, 991, 554, 45,  560, 943, 633, 345, 244, 777, 676, 734,
      869, 893, 76,  534, 38,  764, 832, 416, 622, 500, 703, 103, 340, 680, 296,
      662, 401, 900, 620, 208, 104, 958, 425, 380, 574, 468, 945, 189, 739, 106,
      216, 637, 992, 856, 137, 234, 157, 319, 418, 254, 957, 918, 879, 557, 704,
      42,  632, 204, 311, 7,   905, 726, 33,  44,  174, 57,  539, 490, 70,  448,
      827, 68,  94,  231, 82,  228, 482, 910, 246, 770, 995, 744, 567, 249, 793,
      56,  233, 963, 298, 877, 170, 453, 63,  636, 626, 129, 788, 180, 295, 838,
      591, 471, 192, 188, 998, 46,  928, 381, 96,  99,  253, 159, 266, 47,  542,
      733, 114, 625, 505, 937, 637, 853, 965, 970, 692, 863, 724, 816, 987, 529,
      916, 580, 555, 506, 465, 750, 416, 657, 528, 337, 329, 977, 260, 368, 541,
      184, 8,   779, 92,  989, 160, 605, 99,  516, 967, 854, 393, 193, 365, 620,
      330, 920, 551, 182, 341, 988, 972, 733, 643, 386, 852, 986, 527, 98,  589,
      243, 786, 247, 135, 750, 264, 296, 854, 111, 125, 718, 695, 14,  767, 458,
      898, 32,  448, 240, 706, 226, 611, 935, 378, 851, 560, 529, 615, 651, 250,
      206, 713, 405, 266, 897, 970, 689, 98,  844, 727, 316, 677, 214, 953, 528,
      639, 771, 11,  405, 173, 294, 288, 710, 799, 909, 594, 624, 78,  955, 608,
      174, 449, 428, 79,  900, 687, 621, 55,  455, 297, 644, 645, 166, 591, 261,
      592, 530, 549, 883, 264, 893, 787, 961, 997, 221, 385, 394, 437, 512, 834,
      946, 287, 868, 147, 664, 417, 857, 728, 80,  649, 735, 187, 690, 806, 146,
      353, 531, 869, 235, 665, 238, 948, 464, 570, 29,  432, 497, 583, 408, 69,
      966, 805, 342, 388, 545, 942, 435, 293, 947, 518, 755, 796, 347, 40,  306,
      795, 755, 300, 599, 614, 74,  306, 941, 601, 759, 441, 734, 993, 365, 339,
      990, 176, 525, 278, 72,  540, 933, 976, 801, 809, 659, 912, 59,  867, 338,
      265, 444, 864, 161, 265, 230, 442, 892, 658, 109, 154, 872, 808, 177, 871,
      586, 462, 855, 518, 992, 505, 808, 474, 503, 125, 54,  498, 487, 677, 381,
      194, 387, 290, 37,  774, 707, 585, 682, 404, 55,  675, 91,  633, 924, 468,
      459, 195, 475, 929, 852, 344, 417, 397, 610, 892, 667, 645, 622, 739, 172,
      889, 726, 394, 847, 678, 27,  618, 121, 33,  835, 684, 413, 16,  410, 930,
      171, 476, 598, 258, 224, 903, 870, 444, 821, 195, 634, 772, 978, 379, 400,
      672, 745, 93,  199, 922, 104, 686, 654, 949, 244, 313, 662, 320, 718, 617,
      967, 993, 598, 343, 161, 890, 576, 720, 548, 61,  881, 89,  983, 474, 771,
      101, 584, 202, 250, 669, 696, 170, 846, 9,   452, 86,  261, 129, 415, 120,
      534, 217, 4,   944, 630, 619, 326, 599, 497, 728, 145, 506, 995, 689, 983,
      458, 986, 812, 897, 342, 218, 842, 154, 904, 285, 101, 927, 768, 638, 374,
      800, 547, 891, 96,  215, 830, 305, 743, 382, 412, 517, 450, 334, 797, 86,
      829, 399, 56,  349, 301, 960, 959, 194, 673, 554, 894, 327, 213, 404, 732,
      362, 848, 490, 787, 700, 874, 150, 778, 65,  81,  179, 373, 489, 914, 766,
      329, 895, 116, 915, 434, 794, 661, 419, 337, 802, 32,  85,  882, 133, 911,
      629, 281, 257, 64,  248, 899, 615, 434, 200, 701, 575, 907, 165, 580, 377,
      27,  833, 708, 610, 789, 345, 142, 814, 797, 407, 361, 903, 274, 820, 410,
      752, 152, 310, 681, 556, 758, 694, 207, 181, 600, 822, 612, 509, 470, 383,
      745, 142, 346, 748, 0,   868, 706, 415, 626, 670, 819, 71,  737, 246, 678,
      425, 62,  163, 826, 502, 795, 63,  572, 565, 634, 343, 765, 567, 445, 887,
      440, 59,  276, 568, 36,  287, 367, 241, 42,  837, 590, 876, 793, 821, 912,
      648, 5,   952, 294, 877, 525, 106, 532, 130, 213, 470, 938, 318, 709, 687,
      753, 137, 354, 436, 862, 256, 642, 920, 923, 937, 15,  952, 663, 229, 201,
      709, 387, 109, 267, 477, 699, 351, 183, 652, 553, 832, 181, 196, 358, 286,
      850, 783, 348, 743, 982, 360, 741, 314, 688, 74,  858, 510, 578, 139, 602,
      754, 931, 48,  962, 559, 208, 309, 757, 679, 477, 280, 544, 717, 691, 368,
      717, 922, 118, 542, 773, 582, 143, 210, 825, 481, 230, 169, 457, 825, 2,
      211, 779, 504, 725, 627, 710, 845, 385, 475, 392, 402, 655, 716, 512, 25,
      874, 875, 295, 344, 476, 406, 895, 321, 131, 283, 527, 73,  138, 809, 500,
      614, 464, 334, 276, 994, 713, 890, 781, 929, 406, 640, 501, 841, 441, 712,
      378, 411, 275, 57,  262, 331, 70,  65,  119, 78,  279, 411, 123, 945, 496,
      956, 630, 785, 85,  533, 60,  450, 478, 499, 317, 107, 507, 899, 122, 571,
      858, 849, 762, 198, 760, 873, 563, 451, 89,  38,  873, 242, 278, 569, 386,
      577, 68,  233, 110, 575, 429, 284, 120, 840, 277, 451, 14,  304, 752, 242,
      955, 669, 881, 376, 333, 152, 619, 640, 558, 105, 268, 711, 841, 126, 806,
      466, 272, 936, 715, 744, 183, 496, 493, 639, 11,  314, 731, 140, 481, 45,
      742, 682, 124, 889, 349, 896, 882, 767, 587, 317, 828, 916, 980, 360, 236,
      786, 203, 41,  846, 324, 536, 660, 414, 602, 984, 163, 514, 258, 288, 6,
      810, 320, 561, 291, 13,  155, 2,   953, 515, 22,  380, 350, 279, 262, 571,
      981, 729, 34,  756, 746, 650, 205, 819, 588, 886, 723, 372, 996, 641, 653,
      611, 867, 207, 37,  934, 188, 676, 453, 310, 878, 421, 232, 95,  513, 403,
      20,  263, 39,  725, 817, 501, 363, 30,  168, 492, 384, 593, 31,  540, 679,
      751, 130, 878, 778, 159, 291, 473, 919, 480, 158, 205, 880, 885, 82,  162,
      958, 375, 547, 768, 859, 346, 578, 842, 185, 226, 976, 984, 41,  862, 117,
      18,  392, 494, 145, 866, 667, 483, 674, 482, 799, 492, 883, 603, 311, 28,
      75,  627, 113, 24,  942, 395, 24,  681, 904, 906, 700, 354, 581, 965, 521,
      641, 794, 968, 651, 332, 769, 325, 802, 663, 132, 164, 282, 940, 427, 424,
      144, 479, 22,  90,  436, 338, 391, 465, 608, 760, 247, 144, 705, 30,  141,
      432, 631, 422, 720, 111, 831, 267, 141, 523, 719, 382, 429, 48,  777, 642,
      585, 824, 53,  513, 693, 859, 221, 664, 695, 462, 471, 964, 526, 190, 455,
      971, 864, 472, 50,  849, 502, 805, 579, 721, 292, 692, 974, 712, 420, 960,
      715, 224, 936, 844, 361, 749, 17,  58,  788, 71,  241, 981, 75,  839, 439,
      570, 595, 659, 238, 237, 424, 189, 473, 741, 818, 656, 888, 818, 301, 798,
      235, 696, 389, 223, 219, 87,  524, 303, 397, 665, 126, 845, 569, 328, 987,
      40,  762, 747, 84,  9,   39,  648, 107, 88,  197, 607, 72,  431, 467, 716,
      519, 559, 865, 730, 803, 545, 711, 998, 781, 901, 64,  259, 632, 526, 740,
      245, 596, 209, 234, 375, 237, 49,  469, 926, 307, 623, 722, 383, 714, 740,
      371, 484, 299, 186, 443};

  void* chunks[total_num];
  for (int i = 0; i < total_num; i++) {
    chunks[i] = nullptr;
  }
  for (int i = 0; i < 2 * total_num; i++) {
    size_t w = what_to_do[i];
    if (chunks[w] == nullptr) {
      chunks[w] = alloc.GetFrame(0);
      EXPECT_TRUE(chunks[w] >= (void*)start_addr);
      *(size_t*)chunks[w] = w;
    } else {
      EXPECT_TRUE(*(size_t*)(chunks[w]) == w);
      alloc.FreeFrame(chunks[w]);
    }
  }
}
}  // namespace
}  // namespace kernel_test
}  // namespace Kernel
